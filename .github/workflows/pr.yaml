on: pull_request
name: Pull Request Review
jobs:
  test-composer-install:
    runs-on: ubuntu-latest
    env:
      COMPOSER_ALLOW_SUPERUSER: 1
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
    name: Validate composer (PHP ${{ matrix.php}})
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: Validate composer files
        run: composer validate composer.json --strict

      - name: '[prod] Composer install with exported .env variables'
        run: |
          set -a && source .env && set +a
          APP_ENV=prod composer install --no-dev -o

      - name: Reset composer install
        run: rm -rf ./vendor

      - name: '[dev] Composer install with exported .env variables'
        run: |
          set -a && source .env && set +a
          APP_ENV=dev composer install

      - name: Normalize composer files
        run: composer normalize --dry-run

  validate-doctrine-shema:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: mysql://db:db@127.0.0.1:3306/db?serverVersion=mariadb-10.5.13
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
    name: Validate Doctrine Schema (PHP ${{ matrix.php}})
    services:
      mariadb:
        image: mariadb:10.5.13
        env:
          MYSQL_USER: db
          MYSQL_PASSWORD: db
          MYSQL_DATABASE: db
          MYSQL_ROOT_PASSWORD: db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: 'Composer install with exported .env variables'
        run: |
          set -a && source .env && set +a
          APP_ENV=prod composer install --no-dev -o

      - name: Run Doctrine Migrations
        run: APP_ENV=prod php bin/console doctrine:migrations:migrate --no-interaction

      - name: Validate Doctrine schema
        run: APP_ENV=prod php bin/console doctrine:schema:validate

  php-cs-fixer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
    name: PHP Coding Standards Fixer (PHP ${{ matrix.php }})
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: php-cs-fixer
        run: phpdbg -qrr ./vendor/bin/php-cs-fixer fix --dry-run

  phpunit:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:lts
        ports:
          - 3306
        env:
          MYSQL_USER: db
          MYSQL_PASSWORD: db
          MYSQL_DATABASE: db_test
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
    name: PHP Unit tests (PHP ${{ matrix.php }})
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: PHP Unit
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: DATABASE_URL="mysql://db:db@127.0.0.1:$PORT/db_test" composer run tests

  markdownlint:
    runs-on: ubuntu-latest
    name: markdownlint
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "::set-output name=dir::$(npm cache dir)"

      - name: Cache npm packages
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: npm install
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install

      - name: markdownlint
        run: npm run check-coding-standards

  apispec:
    runs-on: ubuntu-latest
    name: API Specification validation
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Export specifications (yaml)
        run: bin/console api:openapi:export --yaml --output=public/api-spec-v1.yaml --no-interaction

      - name: Check for changes in specifications (yaml)
        run: git diff --diff-filter=ACMRT --exit-code public/api-spec-v1.yaml

      - name: Export specifications (json)
        run: bin/console api:openapi:export --output=public/api-spec-v1.json --no-interaction

      - name: Check for changes in specifications (json)
        run: git diff --diff-filter=ACMRT --exit-code public/api-spec-v1.json

  changelog:
    runs-on: ubuntu-latest
    name: Changelog should be updated
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Git fetch
        run: git fetch

      - name: Check that changelog has been updated.
        run: git diff --exit-code origin/develop -- CHANGELOG.md && exit 1 || exit 0
